{% extends '::base.html.twig' %}

{% block title %}File list - Emission{% endblock %}

{% block javascripts %}
<script src="{{ asset('bundles/enginewerkemission/js/jquery-1.7.2.min.js') }}"></script>
<script src="{{ asset('bundles/enginewerkemission/js/vendor/resumable/resumable.js') }}"></script>
<script src="{{ asset('bundles/enginewerkemission/js/base.js') }}"></script>
<script src="{{ asset('bundles/enginewerkemission/js/md5.js') }}"></script>
<script src="{{ asset('bundles/enginewerkemission/js/vendor/SparkMD5/spark-md5.min.js') }}"></script>
<script src="{{ asset('bundles/enginewerkemission/js/vendor/jStorage/jstorage.js') }}"></script>
<script src="{{ asset('bundles/enginewerkemission/js/pasteImageFromClipboard.js') }}"></script>
<script src="{{ asset('bundles/enginewerkemission/js/app-response.js') }}"></script>
{% endblock %}

{% block stylesheets %}
<link rel="stylesheet" href="{{ asset('bundles/enginewerkemission/css/style.css') }}">
<link rel="stylesheet" href="{{ asset('bundles/enginewerkemission/css/resumable.css') }}">
{% endblock %}

{% import '::macro.html.twig' as marco %}

{% block body %}
<!-- The fileinput-button span is used to style the file input field as button -->
    <div id="emissionSettingsContainer" class="hidden">
        <div><a href="" id="emissionSettingsContainerUpperSwitch" title="Close settings"><img src="/bundles/enginewerkemission/img/1382042732_down4.png"/></a></div>
        {% if app.environment == 'dev' %}
        {% endif %}
        <div><input type="checkbox" id="promptForScreenshotFilename"/><label for="promptForScreenshotFilename">Prompt for screenshot filename</label></div>
        <div><input type="checkbox" id="askBeforeDeleteCheckBox"/><label for="askBeforeDeleteCheckBox">Ask before delete file</label></div>        
    </div>
    
    <div id="emissionMainMenuContainer">
        <div style="text-align: right; color:#323232;"><span style="float: left;">{{ company_name }}</span>{{ app.user.username }} <a href="{{ path('logout') }}" title="Logout Yourself ;)"><img src="/bundles/enginewerkemission/img/1382043670_519564-060_Off.png"/></a> <a href="" id="emissionSettingsContainerSwitch" title="Open settings"><img src="/bundles/enginewerkemission/img/1382042110_45_Menu.png"/></a></div>
    </div>
    <div id="emissionFileDropContainer">
        <div id="dropbox">
            <div id="browse"></div>
        </div>
    </div>
    
    <div id="emissionFileListUploadContainer">
        <div id="dropbox_progress">
            <div class="progressHolder">
                <div class="progress"></div>
            </div>
        </div>
        
        <!-- The container for the uploaded files -->
        <div id="files" class="files">
            <table cellspacing="0" cellpadding="10" id="filesTable" class="center">
                <tbody>
            {% for File in Files %}
                <tr{% if File.isComplete == 1 %} data-file-completed="yes"{% endif%} data-file-id="{{ File.id }}" id="fhash-{% if File.checksum == null %}{{ File.name|md5 }}{% else %}{{ File.checksum }}{% endif %}">
                    <td class="fileName">{{ File.name }}{% if File.isComplete == 0 %} (incomplete){% endif %}</td>
                    <td class="fileUploadedBy">{{ File.uploadedBy }}</td>
                    <td class="fileHashID">{{ File.fileId }}</td>
                    <td class="fileType">{{ File.type }}</td>
                    <td class="fileSize">{{ marco.bytesToSize(File.size) }}</td>
                    <td class="fileExpirationDate">{{ File.expirationDate|date("Y-m-d H:i:s") }}</td>
                    <td class="fileUpdatedAt">{{ File.updatedAt|date("Y-m-d H:i:s") }}</td>
                    <td class="fileCreatedAt">{{ File.createdAt|date("Y-m-d H:i:s") }}</td>
                    {% if File.isComplete == 1 %}
                        <td class="fileOptions">
                            <a href="{{ path('show_file', {'file': File.fileId}) }}">show</a> 
                            <a href="{{ path('download_file', {'file': File.fileId}) }}" class="fileOptionsDownloadLink">save</a> 
                            <a href="{{ path('open_file', {'file': File.fileId}) }}" class="fileOptionsOpenLink">open</a> - 
                            <a href="{{ path('delete_file', {'file': File.fileId}) }}" class="remove-file" data-filename="{{ File.name }}">delete</a>
                        </td>
                    {% else %}
                        <td class="fileOptions">
                            <a href="{{ path('delete_file', {'file': File.fileId}) }}" class="remove-file" data-filename="{{ File.name }}">delete</a>
                        </td>
                    {% endif%}
                </tr>
            {% endfor %}
                </tbody>
            </table>
        </div>
    </div>

    <script type="text/javascript">        
        var url = '{{ path('upload_file') }}'
        var urlChunkTest = '{{ path('upload_file_chunk_test') }}'
        var maxChunkSize = ({% if max_chunk_size > 16 %}16{% else %}{{max_chunk_size}}{% endif %} * 1024 * 1024); // to MB
        var postdata = {'form[_token]' : '{{Form._token.vars.value}}'};
        
        var pendingFilesNumber = 0;
        
        var r = new Resumable({
            target: url, 
            targetChunkTestUrl: urlChunkTest,
            chunkRetryInterval: 2,
            simultaneousUploads: 1,
            method : 'POST',
            chunkSize : maxChunkSize,
            forceChunkSize : true,
            testChunks : true,
            query: postdata,
            fileParameterName : 'form[fileBlob]',
        });


        // Resumable.js isn't supported, fall back on a different method
        if(!r.support) {
            alert('File upload not supported');
        }

        r.assignBrowse(document.getElementById('browse'));
        r.assignDrop(document.getElementById('emissionApplicationContainer'));
 
        r.on('fileAdded', function(resumable, event) {
            cursorBusy();
            
            var file = resumable.file;
            resumable.pause();

            var blobSlice = File.prototype.slice || File.prototype.mozSlice || File.prototype.webkitSlice,
            chunkSize = maxChunkSize,                               // read in chunks of 2MB
            chunks = Math.ceil(file.size / chunkSize),
            currentChunk = 0,
            spark = new SparkMD5.ArrayBuffer(),
            frOnload = function(e) {
                log("read chunk");
                spark.append(e.target.result);                 // append array buffer
                currentChunk++;

                if (currentChunk < chunks) {
                    loadNext();
                } else {
                    resumable.uniqueIdentifier = spark.end();
                    cursorNormal();

                    var fileNameHash = resumable.uniqueIdentifier;
                    info(file.name, fileNameHash);
                    pendingFilesNumber++;
                    
                    resumable.pause();
                    r.upload();

                    if($('#fhash-' + fileNameHash + '').length === 0 ) {

                        var tableRow = '<tr id="fhash-' + fileNameHash + '"> \n' + 
                            '<td class="fileName">' + file.name + '</td> \n' + 
                            '<td class="fileHashID"></td> \n' + 
                            '<td class="fileUploadedBy"></td> \n' + 
                            '<td class="fileType"></td> \n' + 
                            '<td class="fileSize">' + bytesToSize(file.size, 2) + '</td> \n' + 
                            '<td class="fileExpirationDate"></td> \n' + 
                            '<td class="fileUpdatedAt"></td> \n' + 
                            '<td class="fileCreatedAt"></td> \n' + 
                            '<td></td> \n' + 
                        '</tr>';

                        $('#filesTable tbody').prepend(tableRow);
                    }
                }
            },
            frOnerror = function () {
                log('Md5 compute error');
            };

            function loadNext() {
                var fileReader = new FileReader();
                fileReader.onload = frOnload;
                fileReader.onerror = frOnerror;

                var start = currentChunk * chunkSize,
                    end = ((start + chunkSize) >= file.size) ? file.size : start + chunkSize;

                fileReader.readAsArrayBuffer(blobSlice.call(file, start, end));
            };

            loadNext();
                    
        });
        
        r.on('uploadStart', function(){
            cursorBusy();
        });
        
        r.on('fileSuccess', function(Resumable, jsonTextResponse) {

            log('Total files: ' + r.files.length);
            
            try {
                var app = new AppResponse(null, jsonTextResponse);
            } catch (error) {
                log('JSON parse error: ' + error);
                log(jsonTextResponse);
            }
            
            if(app) {
                if(app.status.isSuccess()) {
                    if(app.data) {
                        var file = app.data;
                        var link = $('<a>')
                        .attr('target', '_blank')
                        .prop('href', file.download_url);
                
                        var fileNameHash = Resumable.uniqueIdentifier;
                        info(file.name, fileNameHash);
                
                        var tableRow = '<tr data-file-id="' + file.id + '" id="fhash-' + fileNameHash + '"> \n' + 
            '<td class="fileName">' + file.name + '</td> \n' + 
            '<td class="fileHashID">' + file.file_id + '</td> \n' + 
            '<td class="fileUploadedBy">' + file.uploaded_by + '</td> \n' + 
            '<td class="fileType">' + file.type + '</td> \n' + 
            '<td class="fileSize">' + bytesToSize(file.size, 2) + '</td> \n' + 
            '<td class="fileExpirationDate">' + file.expiration_date + '</td> \n' + 
            '<td class="fileUpdatedAt">' + file.updated_at + '</td> \n' + 
            '<td class="fileCreatedAt">' + file.created_at + '</td> \n' + 
            '<td class="fileOptions"><a href="' + file.show_url + '">show</a> <a href="' + file.download_url + '" class="fileOptionsDownloadLink">save</a> <a href="' + file.open_url + '" class="fileOptionsOpenLink">open</a> - <a href="' + file.delete_url + '" class="remove-file">delete</a></td> \n' + 
        '</tr>';

                        $('#fhash-' + fileNameHash).replaceWith(tableRow);
                        
                        pendingFilesNumber--;

                        if(pendingFilesNumber === 0) {
                            
                            cursorNormal();
                            setTimeout(function() {
   
                                $('#dropbox_progress div.progressHolder').fadeTo(200, 0.01, function(){
                                    setTimeout(function(){
                                        $('#dropbox_progress').find('.progress').width(0);
                                        setTimeout(function(){
                                            $('#dropbox_progress div.progressHolder').fadeTo(100, 1);
                                        }, 200);
                                    }, 300);
                                });
                             }, 100);
                        }

                    }
                    
                } else {
                    if(app.status.isError()) {
                        if(app.message) {
                            alert('Error occured: ' + app.message);
                        } else {
                            alert('Unexpectred error occured');
                        }
                    } else if (app.message) { 
                        alert(app.message);
                    } else {
                        alert('Unexpectred error occured');
                    }
                }
            } else {
                alert('Unexpectred error occured');
            }
            
            cursorNormal();
        });
        
        r.on('fileError', function(Resumable, jsonTextResponse){
            log('fileError');
            
            var app = new AppResponse(null, jsonTextResponse);
            var fileDOMObject = $('#fhash-' + Resumable.uniqueIdentifier);

            fileDOMObject.fadeOut(200, function(){
                fileDOMObject.remove();
            });
            
            cursorNormal();
            alert(Resumable.file.fileName + ' : ' + app.message);
        });

        r.on('progress', function() {
            $('#dropbox_progress').find('.progress').width($('#dropbox_progress').find('.progressHolder').width() * r.progress());
        });
               
        $('#emissionSettingsContainerSwitch, #emissionSettingsContainerUpperSwitch').click(function(event){
            
            $('#emissionSettingsContainer').toggleClass('hidden');
            
            event.preventDefault();
        });
        
        $(function(){
            
            // Option - Ask before delete
            if($.jStorage.get('app.settings.ask_before_delete', 'yes') === 'yes') {
                $('#askBeforeDeleteCheckBox').attr('checked', 'checked');
            }
            
            $('#askBeforeDeleteCheckBox').change(function(){
                var option = ($(this).attr('checked') === 'checked') ? 'yes' : 'no';
                $.jStorage.set('app.settings.ask_before_delete', option);
                log($.jStorage.get('app.settings.ask_before_delete', 'yes'));
            });
            
            // Option - Fast and stable network - LAN
            if($.jStorage.get('app.settings.fast_and_stable_network', 'yes') === 'yes') {
                $('#fastAndStableNetworkCheckBox').attr('checked', 'checked');
            }
            
            $('#fastAndStableNetworkCheckBox').change(function(){
                var option = ($(this).attr('checked') === 'checked') ? 'yes' : 'no';
                $.jStorage.set('app.settings.fast_and_stable_network', option);
                log($.jStorage.get('app.settings.fast_and_stable_network', 'yes'));
            });
            
            // Option - Prompt for screenshot file name
            if($.jStorage.get('app.settings.prompt_for_screenshot_filename', 'yes') === 'yes') {
                $('#promptForScreenshotFilename').attr('checked', 'checked');
            }
            
            $('#promptForScreenshotFilename').change(function(){
                var option = ($(this).attr('checked') === 'checked') ? 'yes' : 'no';
                $.jStorage.set('app.settings.prompt_for_screenshot_filename', option);
                log($.jStorage.get('app.settings.prompt_for_screenshot_filename', 'yes'));
            });
 
            
        });
        
    </script>
{% endblock %}

